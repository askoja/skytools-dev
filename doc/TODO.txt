
= Skytools ToDo list =

== Required for 3.0-alpha ==

* copy_event check
* pgq.CascadedConsumer event processing
* londiste.ref.txt update with new commands?
  or at least demo for new londiste functionality.

== Required for 3.0-final ==

* londiste check
* londiste fkeys
* londiste globbing
* Refresh default .ini files, add comments.
  Alternative: have defailt .ini in script docstring,
  have DBScript switch to dump it.

* dead node handling / failover.
* pk vs table exists check - missing tables gets pk error

* new ticker:
  - logging
  - daemonizing
  - error handling
  - config file?

== Good to have changes ==

=== sql/pgq ===

* drop_queue(force) - to drop consumers
* pgq_node.is_root_event() rettype

=== python/skytools ===

* DBScript: db error should show conn name
* sleeps while waiting notices from db
* exec_cmd better name

=== python/pgq ===

* public vs. local connect string
* node connstr change
* unregister_node / drop_node
* make everything use next_batch_info()
* pgq.fetch_batch_cursor(cursor_name, limit) returns setof event.
  If returns less than limit, cursor is closed, all events done.
  Otherwise the cursor is kept open and consumer can read from it.

=== python/londiste ===

* Make Londiste support table wildcards.
* 'Q' event type for londiste, (queue_splitter event), for event
  that needs to be inserted into queue.  Also trigger flag to
  create such event.
  - better to be done as "redirect" - allow events for a table
    to be redirected to another table or queue.
* --wait/--nowait switch for execute, to wait until script is applied
  to everywhere.
* reorg vs. copy: Check what happens if some table is in copy but reorg is attempted.
* execute vs. copy: needs wait?


=== sql/londiste ===

* plpgsql trigger for TRUNCATE / support for installing such trigger

== Doc changes ==

* logging from db is mess, needs full cleanup
* docstring review
* dbscript: document self.args
* dbscript: easier help string setting
* Document DB-API and psycopg2 details a bit under psycopgwrapper.
* replace "raise Exception" with "raise UsageError" , where we just
  want to inform user and so traceback is not needed


== old todo (not up-to-date) ==

* CascadeAdmin: job_name vs. consumer_name as worker_name
* londiste syncer: get provider db?
* dispatcher scripts: no need to check tables repeatedly

* cascaded replication, switchover, failover
  - node-status
  - set-status
  - rename-node
  - on root switch/failover check if all tables are present

== Low-priority ==

=== Larger things ===

* skylog: publish sample logdb schema, with some tools
* londiste: support creating slave from master by pg_dump / PITR.
* pgq/cascade: rename node

=== Smaller things ===

* londiste: londiste status cmd
 - check what modules are installed
 - check if replay is running (lag?)
 - check if copy is running (lag?)
 - count of tables done, count of unsynced
 - table in the middle of copy

* We need own async conn-to-conn copy loop in Python/PythonC.
  Currently we simply pipe simply one copy_to() to another copy_from(),
  but that likely halves the potential throughput.
* pgqadm/new-ticker: separate priod for retry queue processing
* skytools: switch (-q) for silence for cron/init scripts
* DBScript: failure to write pidfile should be logged (cronscripts)
* ideas from SlonyI:
  - when buffering queries, check their size
* pgqadm: show count of events to be processed [--count switch].
* automatic "repair" - after reaching sync point, the "replay" must be killed/paused, then fixes can be applied

== Just ideas ==

* skytools: config from database
* skytools: config-less operation?
* londiste: somehow automatic sync of table structure/functions/...?

